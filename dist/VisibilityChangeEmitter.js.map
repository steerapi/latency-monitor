{"version":3,"sources":["VisibilityChangeEmitter.js"],"names":["debug","require","VisibilityChangeEmitter","document","_initializeVisibilityVarNames","_addVisibilityChangeListener","hidden","visibilityChange","mozHidden","msHidden","webkitHidden","_hidden","_visibilityChange","addEventListener","_handleVisibilityChange","bind","undefined","visible","emit","EventEmitter"],"mappings":";;;;;;;;AAEA;;;;;;;;;;+eAFA;;AAIA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,yCAAjB,CAAd;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;IAwBqBC,uB;;;AACnB;;;AAGA,qCAAc;AAAA;;AAAA;;AAEZ,QAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnCH,YAAM,uDAAN;AACA;AACD;AACD,UAAKI,6BAAL;AACA,UAAKC,4BAAL;AAPY;AAQb;;AAED;;;;;;;;;;;;oDAQgC;AAC9B,UAAIC,eAAJ;AACA,UAAIC,yBAAJ;AACA,UAAI,OAAOJ,SAASG,MAAhB,KAA2B,WAA/B,EAA4C;AAC1C;AACAA,iBAAS,QAAT;AACAC,2BAAmB,kBAAnB;AACD,OAJD,MAIO,IAAI,OAAOJ,SAASK,SAAhB,KAA8B,WAAlC,EAA+C;AACpDF,iBAAS,WAAT;AACAC,2BAAmB,qBAAnB;AACD,OAHM,MAGA,IAAI,OAAOJ,SAASM,QAAhB,KAA6B,WAAjC,EAA8C;AACnDH,iBAAS,UAAT;AACAC,2BAAmB,oBAAnB;AACD,OAHM,MAGA,IAAI,OAAOJ,SAASO,YAAhB,KAAiC,WAArC,EAAkD;AACvDJ,iBAAS,cAAT;AACAC,2BAAmB,wBAAnB;AACD;AACD,WAAKI,OAAL,GAAeL,MAAf;AACA,WAAKM,iBAAL,GAAyBL,gBAAzB;AACD;;AAED;;;;;;;;mDAK+B;AAC7B,UACE,OAAOJ,SAASU,gBAAhB,KAAqC,WAArC,IACA,OAAOV,SAAS,KAAKQ,OAAd,CAAP,KAAkC,WAFpC,EAGE;AACAX,cAAM,oFAAN;AACD,OALD,MAKO;AACL;AACAG,iBAASU,gBAAT,CACE,KAAKD,iBADP,EAEE,KAAKE,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAFF,EAGE,KAHF;AAKD;AACF;;AAED;;;;;;;;gCAKY;AACV,UAAI,KAAKJ,OAAL,KAAiBK,SAAjB,IAA8Bb,SAAS,KAAKQ,OAAd,MAA2BK,SAA7D,EAAwE;AACtE,eAAOA,SAAP;AACD;;AAED,aAAO,CAACb,SAAS,KAAKQ,OAAd,CAAR;AACD;;AAED;;;;;;;;;;8CAO0B;AACxB,UAAMM,UAAU,CAACd,SAAS,KAAKQ,OAAd,CAAjB;AACAX,YAAMiB,UAAU,cAAV,GAA2B,aAAjC;AACA;AACA,WAAKC,IAAL,CAAU,kBAAV,EAA8BD,OAA9B;AACD;;;;EAzFkDE,gB;;kBAAhCjB,uB","file":"VisibilityChangeEmitter.js","sourcesContent":["/* global document */\n\nimport EventEmitter from 'events';\n\nconst debug = require('debug')('latency-monitor:VisibilityChangeEmitter');\n\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n *\n * @class VisibilityChangeEmitter\n */\nexport default class VisibilityChangeEmitter extends EventEmitter {\n  /**\n   * Creates a VisibilityChangeEmitter\n   */\n  constructor() {\n    super();\n    if (typeof document === 'undefined') {\n      debug('This is not a browser, no \"document\" found. Stopping.');\n      return;\n    }\n    this._initializeVisibilityVarNames();\n    this._addVisibilityChangeListener();\n  }\n\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   * @private\n   */\n  _initializeVisibilityVarNames() {\n    let hidden;\n    let visibilityChange;\n    if (typeof document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden';\n      visibilityChange = 'visibilitychange';\n    } else if (typeof document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden';\n      visibilityChange = 'mozvisibilitychange';\n    } else if (typeof document.msHidden !== 'undefined') {\n      hidden = 'msHidden';\n      visibilityChange = 'msvisibilitychange';\n    } else if (typeof document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden';\n      visibilityChange = 'webkitvisibilitychange';\n    }\n    this._hidden = hidden;\n    this._visibilityChange = visibilityChange;\n  }\n\n  /**\n   * Adds an event listener on the document that listens to changes in document.visibilityChange\n   * (or whatever name by which the visibilityChange variable is known in the browser)\n   * @private\n   */\n  _addVisibilityChangeListener() {\n    if (\n      typeof document.addEventListener === 'undefined' ||\n      typeof document[this._hidden] === 'undefined'\n    ) {\n      debug('Checking page visibility requires a browser that supports the Page Visibility API.');\n    } else {\n      // Handle page visibility change\n      document.addEventListener(\n        this._visibilityChange,\n        this._handleVisibilityChange.bind(this),\n        false\n      );\n    }\n  }\n\n  /**\n   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n   * ```undefined``` if the page visibility API is not supported by the browser.\n   * @returns {Boolean|void} whether the page is now visible or not (undefined is unknown)\n   */\n  isVisible() {\n    if (this._hidden === undefined || document[this._hidden] === undefined) {\n      return undefined;\n    }\n\n    return !document[this._hidden];\n  }\n\n  /**\n   * The function that is called when document.visibilityChange has changed\n   * It emits an event called visibilityChange and sends the value of document.hidden as a\n   * parameter\n   *\n   * @private\n   */\n  _handleVisibilityChange() {\n    const visible = !document[this._hidden];\n    debug(visible ? 'Page Visible' : 'Page Hidden');\n    // Emit the event\n    this.emit('visibilityChange', visible);\n  }\n}\n"]}